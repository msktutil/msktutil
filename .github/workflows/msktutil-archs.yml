name: msktutil architectures

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }} with gcc

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu22.04
          - arch: ppc64le
            distro: ubuntu22.04
          - arch: riscv64
            distro: ubuntu22.04
          - arch: s390x
            distro: ubuntu22.04
          - arch: armv7
            distro: ubuntu22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Pass some environment variables to the container
          env: |
            CC: gcc
            CXX: g++
            DEBIAN_FRONTEND: noninteractive

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*)
                cat /etc/debian_version
                apt-get update -q -y
                apt-get install -q -y gcc g++
                gcc --version
                # basic packages
                apt-get install -q -y \
                  autoconf libtool make pkg-config
                # install dependencies
                apt-get install -q -y \
                  libldap2-dev libkrb5-dev libsasl2-dev
                ;;
            esac

          run: |
            ${CC} --version
            ./autogen.sh
            ./configure && make
